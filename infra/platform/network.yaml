AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CareApp Shared Network Stack

  This template defines:
  - Shared VPC (10.0.0.0/16)
  - Transit Gateway
  - Client VPN Endpoint (POC environment only)

  Dependencies: None

  Created: 2025-10-03
  Managed by: Infrastructure Team

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Settings
        Parameters:
          - Environment
      - Label:
          default: Network Settings
        Parameters:
          - SharedVpcCidr
          - ClientVpnCidr
    ParameterLabels:
      Environment:
        default: Environment Name
      SharedVpcCidr:
        default: Shared VPC CIDR
      ClientVpnCidr:
        default: Client VPN CIDR

Parameters:
  Environment:
    Type: String
    Description: Environment name (POC/Production)
    AllowedValues:
      - POC
      - Production
    Default: POC

  SharedVpcCidr:
    Type: String
    Description: Shared VPC CIDR (e.g. 10.0.0.0/16)
    Default: 10.0.0.0/16
    AllowedPattern: ^(10|172|192)\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please specify a valid private IP address range

  ClientVpnCidr:
    Type: String
    Description: Client VPN CIDR (e.g. 10.255.0.0/16)
    Default: 10.255.0.0/16
    AllowedPattern: ^(10|172|192)\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please specify a valid private IP address range

Conditions:
  IsPOC: !Equals [!Ref Environment, POC]
  EnableClientVPN: !Equals [false, true]  # Client VPN is disabled for now

Resources:
  # ========================================
  # Shared VPC
  # ========================================
  SharedVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref SharedVpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-VPC-Shared
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Component
          Value: SharedNetwork

  # Transit Gateway Attachment requires at least one subnet
  SharedVPCSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SharedVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-Subnet-Shared-AZ1
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment

  SharedVPCSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SharedVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-Subnet-Shared-AZ2
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment

  # ========================================
  # Transit Gateway
  # ========================================
  # Hub to connect VPCs
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 64512
      DefaultRouteTableAssociation: enable
      DefaultRouteTablePropagation: enable
      Description: !Sub CareApp ${Environment} Transit Gateway
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-TransitGateway
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Component
          Value: SharedNetwork

  # Attach Shared VPC to Transit Gateway
  SharedVPCTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn:
      - SharedVPC
      - TransitGateway
      - SharedVPCSubnetAZ1
      - SharedVPCSubnetAZ2
    Properties:
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref SharedVPC
      SubnetIds:
        - !Ref SharedVPCSubnetAZ1
        - !Ref SharedVPCSubnetAZ2
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-TGW-Attachment-Shared
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ========================================
  # Client VPN (POC environment only)
  # ========================================
  # Endpoint for municipal staff to access App VPC via VPN
  ClientVPNEndpoint:
    Type: AWS::EC2::ClientVpnEndpoint
    Condition: EnableClientVPN
    Properties:
      ClientCidrBlock: !Ref ClientVpnCidr
      ServerCertificateArn: !Sub
        - arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertId}
        - CertId: REPLACE_WITH_YOUR_SERVER_CERT_ID  # Replace after manual certificate creation
      AuthenticationOptions:
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: !Sub
              - arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertId}
              - CertId: REPLACE_WITH_YOUR_CLIENT_CERT_ID  # Replace after manual certificate creation
      ConnectionLogOptions:
        Enabled: true
        CloudwatchLogGroup: !Ref ClientVPNLogGroup
      Description: !Sub CareApp ${Environment} Client VPN Endpoint
      SplitTunnel: true  # Only 10.0.0.0/8 via VPN, others via local internet
      VpcId: !Ref SharedVPC
      SecurityGroupIds:
        - !Ref ClientVPNSecurityGroup
      TagSpecifications:
        - ResourceType: client-vpn-endpoint
          Tags:
            - Key: Name
              Value: !Sub CareApp-${Environment}-ClientVPN
            - Key: Project
              Value: CareApp
            - Key: Environment
              Value: !Ref Environment
            - Key: ManagedBy
              Value: CloudFormation

  # CloudWatch Logs for Client VPN
  ClientVPNLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableClientVPN
    Properties:
      LogGroupName: !Sub /aws/clientvpn/${AWS::StackName}
      RetentionInDays: 90

  # Security Group for Client VPN
  ClientVPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: EnableClientVPN
    Properties:
      GroupDescription: Security Group for Client VPN Endpoint
      VpcId: !Ref SharedVPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Client VPN connection
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-SG-ClientVPN
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

Outputs:
  SharedVPCID:
    Description: Shared VPC ID
    Value: !Ref SharedVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  SharedVPCCidr:
    Description: Shared VPC CIDR
    Value: !Ref SharedVpcCidr
    Export:
      Name: !Sub ${AWS::StackName}-VPCCidr

  TransitGatewayID:
    Description: Transit Gateway ID
    Value: !Ref TransitGateway
    Export:
      Name: !Sub ${AWS::StackName}-TransitGatewayID

  ClientVPNEndpointID:
    Condition: EnableClientVPN
    Description: Client VPN Endpoint ID
    Value: !Ref ClientVPNEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-ClientVPNEndpointID
