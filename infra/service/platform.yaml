AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CareApp アプリ基盤スタック

  このテンプレートは以下を定義します：
  - ECS Cluster
  - ECRリポジトリ（Frontend/Backend）
  - S3バケット（アプリケーション用、ログ用）
  - Amazon Cognito User Pool
  - IAMロール（ECS Task Execution Role、ECS Task Role）

  依存スタック:
  - CareApp-POC-AppNetwork（VPC ID、Subnet IDs、Security Group IDs参照）
  - CareApp-POC-Database（RDS Endpoint、Secret ARN参照）

  作成日: 2025-10-03
  管理者: インフラチーム

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 環境設定
        Parameters:
          - Environment
          - AppNetworkStackName
          - DatabaseStackName

Parameters:
  Environment:
    Type: String
    Description: 環境名（POC/Production）
    AllowedValues:
      - POC
      - Production
    Default: POC

  AppNetworkStackName:
    Type: String
    Description: アプリ系ネットワークスタック名
    Default: CareApp-POC-AppNetwork

  DatabaseStackName:
    Type: String
    Description: データベーススタック名
    Default: CareApp-POC-Database

Conditions:
  IsProduction: !Equals [!Ref Environment, Production]

Resources:
  # ========================================
  # ECS Cluster
  # ========================================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub CareApp-${Environment}-ECSCluster-Main
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-ECSCluster-Main
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Component
          Value: AppPlatform

  # ========================================
  # ECR Repository
  # ========================================
  # Frontendコンテナイメージ用リポジトリ
  ECRRepositoryFrontend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub careapp-${Environment}-frontend
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub careapp-${Environment}-frontend
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # Backendコンテナイメージ用リポジトリ
  ECRRepositoryBackend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub careapp-${Environment}-backend
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub careapp-${Environment}-backend
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ========================================
  # S3 Bucket
  # ========================================
  # アプリケーション用バケット（申請書添付ファイル保存）
  S3BucketApp:
    Type: AWS::S3::Bucket
    DeletionPolicy: !If [IsProduction, Retain, Delete]
    Properties:
      BucketName: !Sub careapp-${Environment}-app-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If [IsProduction, aws:kms, AES256]
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: MoveToGlacierAfter90Days
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub careapp-${Environment}-app
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ログ用バケット（ALBアクセスログ、CloudTrailログ）
  S3BucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub careapp-${Environment}-logs-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter90Days
            Status: Enabled
            ExpirationInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub careapp-${Environment}-logs
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ========================================
  # Amazon Cognito User Pool
  # ========================================
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub CareApp-${Environment}-UserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
      MfaConfiguration: !If [IsProduction, OPTIONAL, 'OFF']
      UserPoolTags:
        Name: !Sub CareApp-${Environment}-UserPool
        Project: CareApp
        Environment: !Ref Environment
        ManagedBy: CloudFormation

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub CareApp-${Environment}-WebClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60

  # Cognito User Pool Group（管理者）
  CognitoUserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Administrators
      Description: 市職員（管理者）
      UserPoolId: !Ref CognitoUserPool
      Precedence: 0

  # Cognito User Pool Group（事業者ユーザー）
  CognitoUserPoolGroupBusinessUsers:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: BusinessUsers
      Description: 介護事業者
      UserPoolId: !Ref CognitoUserPool
      Precedence: 10

  # ========================================
  # IAM Role（ECS Task Execution Role）
  # ========================================
  # ECSタスク起動時に使用（ECRイメージプル、ログ書き込み、Secrets Manager読み取り）
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CareApp-${Environment}-Role-ECSTaskExecution
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::ImportValue: !Sub ${DatabaseStackName}-SecretArn
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-Role-ECSTaskExecution
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ========================================
  # IAM Role（ECS Task Role）
  # ========================================
  # ECSタスク実行中に使用（S3アクセス、SES送信、Secrets Manager読み取り）
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CareApp-${Environment}-Role-ECSTask
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub ${S3BucketApp.Arn}/*
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::ImportValue: !Sub ${DatabaseStackName}-SecretArn
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub CareApp-${Environment}-Role-ECSTask
        - Key: Project
          Value: CareApp
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ========================================
  # CloudWatch Logs（ECS用）
  # ========================================
  ECSLogGroupFrontend:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/careapp-${Environment}-frontend
      RetentionInDays: 90

  ECSLogGroupBackend:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/careapp-${Environment}-backend
      RetentionInDays: 90

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSClusterName

  ECSClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSClusterArn

  ECRRepositoryFrontendUri:
    Description: ECR Repository URI（Frontend）
    Value: !GetAtt ECRRepositoryFrontend.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryFrontendUri

  ECRRepositoryBackendUri:
    Description: ECR Repository URI（Backend）
    Value: !GetAtt ECRRepositoryBackend.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryBackendUri

  S3BucketAppName:
    Description: S3 Bucket Name（Application）
    Value: !Ref S3BucketApp
    Export:
      Name: !Sub ${AWS::StackName}-S3BucketAppName

  S3BucketLogsName:
    Description: S3 Bucket Name（Logs）
    Value: !Ref S3BucketLogs
    Export:
      Name: !Sub ${AWS::StackName}-S3BucketLogsName

  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolId

  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolClientId

  ECSTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskExecutionRoleArn

  ECSTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskRoleArn
