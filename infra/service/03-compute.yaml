# ==============================================================================
# Service Account - 03 Compute Stack
# ==============================================================================
# 目的: ECS Fargate、ALB、Auto Scalingを構築
# 構成: ECS Cluster, 3 Services (Public/Admin/Batch), ALB, Security Groups
# 設計: サーバーレス、Auto Scaling、Secret参照
# デプロイ順序: 3番目（01-network, 02-databaseの後）
# ==============================================================================

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Service Account Compute Stack - ECS Fargate with ALB and Auto Scaling'

# ==============================================================================
# Parameters
# ==============================================================================
Parameters:
  ProjectName:
    Type: String
    Default: myapp
    Description: Project name for resource naming

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name (dev or prod)

  ECRRepositoryUri:
    Type: String
    Description: ECR repository URI (e.g., 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/myapp)
    AllowedPattern: ^\d{12}\.dkr\.ecr\.[a-z0-9-]+\.amazonaws\.com/[a-z0-9-]+$

  PublicWebImageTag:
    Type: String
    Default: latest
    Description: Docker image tag for Public Web service

  AdminDashboardImageTag:
    Type: String
    Default: latest
    Description: Docker image tag for Admin Dashboard service

  BatchProcessingImageTag:
    Type: String
    Default: latest
    Description: Docker image tag for Batch Processing service

  PublicWebDesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of Public Web tasks

  AdminDashboardDesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of Admin Dashboard tasks

  BatchProcessingDesiredCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: Desired number of Batch Processing tasks

  AdminCertificateArn:
    Type: String
    Description: ACM Certificate ARN for Admin Dashboard ALB HTTPS
    AllowedPattern: ^arn:aws:acm:[a-z0-9-]+:\d{12}:certificate/[a-f0-9-]+$

# ==============================================================================
# Metadata
# ==============================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "Container Image Configuration"
        Parameters:
          - ECRRepositoryUri
          - PublicWebImageTag
          - AdminDashboardImageTag
          - BatchProcessingImageTag
      - Label:
          default: "Service Scaling Configuration"
        Parameters:
          - PublicWebDesiredCount
          - AdminDashboardDesiredCount
          - BatchProcessingDesiredCount
      - Label:
          default: "Certificate Configuration"
        Parameters:
          - AdminCertificateArn

# ==============================================================================
# Resources
# ==============================================================================
Resources:
  # ----------------------------------------------------------------------------
  # ECS Cluster
  # ----------------------------------------------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Environment}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-cluster
        - Key: Environment
          Value: !Ref Environment

  # ----------------------------------------------------------------------------
  # Security Groups
  # ----------------------------------------------------------------------------
  # ALB Security Group (Public)
  ALBPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-alb-public-sg
      GroupDescription: Security group for Public Web ALB
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-vpc-id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from Internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from Internet
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-public-sg
        - Key: Environment
          Value: !Ref Environment

  # ALB Security Group (Admin - VPN only)
  ALBAdminSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-alb-admin-sg
      GroupDescription: Security group for Admin Dashboard ALB (VPN only)
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-vpc-id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.16.0.0/22  # Client VPN CIDR
          Description: HTTPS from Client VPN
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-admin-sg
        - Key: Environment
          Value: !Ref Environment

  # ECS Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-ecs-sg
      GroupDescription: Security group for ECS Fargate tasks
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-vpc-id
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-sg
        - Key: Environment
          Value: !Ref Environment

  # ECS Security Group Ingress - Public ALBから
  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref ALBPublicSecurityGroup
      Description: HTTP from Public ALB

  # ECS Security Group Ingress - Admin ALBから
  ECSSecurityGroupIngressFromAdminALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref ALBAdminSecurityGroup
      Description: HTTP from Admin ALB

  # ----------------------------------------------------------------------------
  # Application Load Balancer - Public Web
  # ----------------------------------------------------------------------------
  PublicWebALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-public-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-public-subnet-1-id
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-public-subnet-2-id
      SecurityGroups:
        - !Ref ALBPublicSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-alb
        - Key: Environment
          Value: !Ref Environment

  PublicWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-public-tg
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-vpc-id
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-tg
        - Key: Environment
          Value: !Ref Environment

  PublicWebALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref PublicWebALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicWebTargetGroup

  # ----------------------------------------------------------------------------
  # Application Load Balancer - Admin Dashboard
  # ----------------------------------------------------------------------------
  AdminDashboardALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-admin-alb
      Type: application
      Scheme: internal  # VPN経由のみ
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-1-id
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-2-id
      SecurityGroups:
        - !Ref ALBAdminSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-alb
        - Key: Environment
          Value: !Ref Environment

  AdminDashboardTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-admin-tg
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-vpc-id
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-tg
        - Key: Environment
          Value: !Ref Environment

  AdminDashboardALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AdminDashboardALB
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !Ref AdminCertificateArn  # Parameter化が必要
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AdminDashboardTargetGroup

  # ----------------------------------------------------------------------------
  # IAM Roles
  # ----------------------------------------------------------------------------
  # ECS Task Execution Role (AWSが管理するロール）
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-db-secret-arn
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/db/*
        - PolicyName: KMSDecrypt
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-db-kms-key-id
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-execution-role
        - Key: Environment
          Value: !Ref Environment

  # ECS Task Role (アプリケーションが使用するロール）
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ProjectName}-${Environment}/*
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-role
        - Key: Environment
          Value: !Ref Environment

  # ----------------------------------------------------------------------------
  # CloudWatch Logs
  # ----------------------------------------------------------------------------
  PublicWebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-${Environment}/public-web
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-web-logs
        - Key: Environment
          Value: !Ref Environment

  AdminDashboardLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-${Environment}/admin-dashboard
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-dashboard-logs
        - Key: Environment
          Value: !Ref Environment

  BatchProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-${Environment}/batch-processing
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-batch-processing-logs
        - Key: Environment
          Value: !Ref Environment

  # ----------------------------------------------------------------------------
  # ECS Task Definitions
  # ----------------------------------------------------------------------------
  PublicWebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-public-web
      Cpu: '512'  # 0.5 vCPU
      Memory: '1024'  # 1 GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: public-web
          Image: !Sub ${ECRRepositoryUri}/public-web:${PublicWebImageTag}
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: SERVICE_NAME
              Value: public-web
            - Name: DB_HOST
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/host}}'
            - Name: DB_PORT
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/port}}'
            - Name: DB_NAME
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/name}}'
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub '{{resolve:secretsmanager:${ProjectName}/${Environment}/db/credentials:SecretString:password}}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PublicWebLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-web-task
        - Key: Environment
          Value: !Ref Environment

  AdminDashboardTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-admin-dashboard
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: admin-dashboard
          Image: !Sub ${ECRRepositoryUri}/admin-dashboard:${AdminDashboardImageTag}
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: SERVICE_NAME
              Value: admin-dashboard
            - Name: DB_HOST
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/host}}'
            - Name: DB_PORT
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/port}}'
            - Name: DB_NAME
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/name}}'
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub '{{resolve:secretsmanager:${ProjectName}/${Environment}/db/credentials:SecretString:password}}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AdminDashboardLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-dashboard-task
        - Key: Environment
          Value: !Ref Environment

  BatchProcessingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-batch-processing
      Cpu: '1024'  # 1 vCPU
      Memory: '2048'  # 2 GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: batch-processing
          Image: !Sub ${ECRRepositoryUri}/batch-processing:${BatchProcessingImageTag}
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: SERVICE_NAME
              Value: batch-processing
            - Name: DB_HOST
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/host}}'
            - Name: DB_PORT
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/port}}'
            - Name: DB_NAME
              Value: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/db/name}}'
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub '{{resolve:secretsmanager:${ProjectName}/${Environment}/db/credentials:SecretString:password}}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BatchProcessingLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-batch-processing-task
        - Key: Environment
          Value: !Ref Environment

  # ----------------------------------------------------------------------------
  # ECS Services
  # ----------------------------------------------------------------------------
  PublicWebService:
    Type: AWS::ECS::Service
    DependsOn: PublicWebALBListener
    Properties:
      ServiceName: !Sub ${ProjectName}-${Environment}-public-web
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref PublicWebTaskDefinition
      DesiredCount: !Ref PublicWebDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-1-id
            - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-2-id
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref PublicWebTargetGroup
          ContainerName: public-web
          ContainerPort: 8080
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-web-service
        - Key: Environment
          Value: !Ref Environment

  AdminDashboardService:
    Type: AWS::ECS::Service
    DependsOn: AdminDashboardALBListener
    Properties:
      ServiceName: !Sub ${ProjectName}-${Environment}-admin-dashboard
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AdminDashboardTaskDefinition
      DesiredCount: !Ref AdminDashboardDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-1-id
            - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-2-id
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref AdminDashboardTargetGroup
          ContainerName: admin-dashboard
          ContainerPort: 8080
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-dashboard-service
        - Key: Environment
          Value: !Ref Environment

  BatchProcessingService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-${Environment}-batch-processing
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BatchProcessingTaskDefinition
      DesiredCount: !Ref BatchProcessingDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-1-id
            - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-service-private-subnet-2-id
          SecurityGroups:
            - !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-batch-processing-service
        - Key: Environment
          Value: !Ref Environment

  # ----------------------------------------------------------------------------
  # Auto Scaling
  # ----------------------------------------------------------------------------
  PublicWebAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${PublicWebService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  PublicWebAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-${Environment}-public-web-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref PublicWebAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  AdminDashboardAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${AdminDashboardService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AdminDashboardAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-${Environment}-admin-dashboard-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AdminDashboardAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

# ==============================================================================
# Outputs
# ==============================================================================
Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${ProjectName}-${Environment}-ecs-cluster-name

  PublicWebALBDnsName:
    Description: Public Web ALB DNS Name
    Value: !GetAtt PublicWebALB.DNSName
    Export:
      Name: !Sub ${ProjectName}-${Environment}-public-web-alb-dns

  AdminDashboardALBDnsName:
    Description: Admin Dashboard ALB DNS Name (internal)
    Value: !GetAtt AdminDashboardALB.DNSName
    Export:
      Name: !Sub ${ProjectName}-${Environment}-admin-dashboard-alb-dns

  PublicWebServiceName:
    Description: Public Web ECS Service Name
    Value: !GetAtt PublicWebService.Name
    Export:
      Name: !Sub ${ProjectName}-${Environment}-public-web-service-name

  AdminDashboardServiceName:
    Description: Admin Dashboard ECS Service Name
    Value: !GetAtt AdminDashboardService.Name
    Export:
      Name: !Sub ${ProjectName}-${Environment}-admin-dashboard-service-name

  BatchProcessingServiceName:
    Description: Batch Processing ECS Service Name
    Value: !GetAtt BatchProcessingService.Name
    Export:
      Name: !Sub ${ProjectName}-${Environment}-batch-processing-service-name
