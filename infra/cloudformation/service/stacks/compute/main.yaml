AWSTemplateFormatVersion: '2010-09-09'
Description: 'Service Account - Compute Stack (ECS Fargate, ALB)'

# ===========================================================================
# Parameters
# ===========================================================================
Parameters:
  ProjectName:
    Type: String
    Default: sample-app
    Description: Project name for resource naming

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name

  VpcId:
    Type: String
    Description: Service VPC ID

  PublicSubnet1Id:
    Type: String
    Description: Public Subnet 1 ID

  PublicSubnet2Id:
    Type: String
    Description: Public Subnet 2 ID

  PrivateSubnet1Id:
    Type: String
    Description: Private Subnet 1 ID

  PrivateSubnet2Id:
    Type: String
    Description: Private Subnet 2 ID

  DBEndpointAddress:
    Type: String
    Description: RDS Endpoint Address

  DBEndpointPort:
    Type: String
    Description: RDS Endpoint Port

  DBName:
    Type: String
    Description: Database Name

  DBConnectionStringSecretArn:
    Type: String
    Description: DB Connection String Secret ARN

  ECRRepositoryPublic:
    Type: String
    Default: sample-app/public
    Description: ECR Repository name for Public Web service

  ECRRepositoryAdmin:
    Type: String
    Default: sample-app/admin
    Description: ECR Repository name for Admin service

  ECRRepositoryBatch:
    Type: String
    Default: sample-app/batch
    Description: ECR Repository name for Batch service

# ===========================================================================
# Resources
# ===========================================================================
Resources:
  # -------------------------------------------------------------------------
  # ECS Cluster
  # -------------------------------------------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Environment}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-cluster
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # -------------------------------------------------------------------------
  # Application Load Balancer (for Public Web)
  # -------------------------------------------------------------------------
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-alb-sg
      GroupDescription: Security Group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from Internet
        # For future HTTPS support
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0
        #   Description: Allow HTTPS from Internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-sg
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # Target Group for Public Web Service
  PublicWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-public-tg
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-tg
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ALB Listener (HTTP)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicWebTargetGroup

  # -------------------------------------------------------------------------
  # Security Group for ECS Tasks
  # -------------------------------------------------------------------------
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-ecs-task-sg
      GroupDescription: Security Group for ECS Tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow traffic from ALB
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB
        # Allow traffic from Platform VPC (VPN access for admin)
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 10.0.0.0/16
          Description: Allow traffic from Platform VPC (VPN)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-sg
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # -------------------------------------------------------------------------
  # CloudWatch Log Groups
  # -------------------------------------------------------------------------
  PublicWebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}/${Environment}/public-web
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-web-logs
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  AdminLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}/${Environment}/admin
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-logs
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  BatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}/${Environment}/batch
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-batch-logs
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # -------------------------------------------------------------------------
  # IAM Roles
  # -------------------------------------------------------------------------
  # ECS Task Execution Role (for ECS to pull images, write logs, etc.)
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DBConnectionStringSecretArn
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-execution-role
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # ECS Task Role (for application runtime permissions)
  ECSTaskRolePublic:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecs-task-role-public
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt PublicWebLogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-role-public
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  ECSTaskRoleAdmin:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecs-task-role-admin
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt AdminLogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-role-admin
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  ECSTaskRoleBatch:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecs-task-role-batch
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt BatchLogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-role-batch
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # -------------------------------------------------------------------------
  # ECS Task Definitions
  # -------------------------------------------------------------------------
  # Public Web Service Task Definition
  PublicWebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-public-web
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRolePublic.Arn
      ContainerDefinitions:
        - Name: public-web
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryPublic}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3000'
            - Name: DB_HOST
              Value: !Ref DBEndpointAddress
            - Name: DB_PORT
              Value: !Ref DBEndpointPort
            - Name: DB_NAME
              Value: !Ref DBName
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub ${DBConnectionStringSecretArn}:password::
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PublicWebLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-web-task
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # Admin Service Task Definition
  AdminTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-admin
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRoleAdmin.Arn
      ContainerDefinitions:
        - Name: admin
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryAdmin}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3000'
            - Name: DB_HOST
              Value: !Ref DBEndpointAddress
            - Name: DB_PORT
              Value: !Ref DBEndpointPort
            - Name: DB_NAME
              Value: !Ref DBName
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub ${DBConnectionStringSecretArn}:password::
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AdminLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-task
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # Batch Service Task Definition
  BatchTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-batch
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRoleBatch.Arn
      ContainerDefinitions:
        - Name: batch
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryBatch}:latest
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: DB_HOST
              Value: !Ref DBEndpointAddress
            - Name: DB_PORT
              Value: !Ref DBEndpointPort
            - Name: DB_NAME
              Value: !Ref DBName
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub ${DBConnectionStringSecretArn}:password::
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-batch-task
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # -------------------------------------------------------------------------
  # ECS Services
  # -------------------------------------------------------------------------
  # Public Web Service
  PublicWebService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${ProjectName}-${Environment}-public-web
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref PublicWebTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
      LoadBalancers:
        - ContainerName: public-web
          ContainerPort: 3000
          TargetGroupArn: !Ref PublicWebTargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-web-service
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # Admin Service (no ALB, VPN access only)
  AdminService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-${Environment}-admin
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AdminTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-admin-service
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # -------------------------------------------------------------------------
  # EventBridge Rule for Batch Execution (scheduled daily at 3:00 AM JST)
  # -------------------------------------------------------------------------
  BatchScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-batch-schedule
      Description: Daily batch execution at 3:00 AM JST
      ScheduleExpression: cron(0 18 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ECSCluster.Arn
          RoleArn: !GetAtt EventBridgeECSRole.Arn
          Id: BatchTask
          EcsParameters:
            TaskDefinitionArn: !Ref BatchTaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: DISABLED
                Subnets:
                  - !Ref PrivateSubnet1Id
                  - !Ref PrivateSubnet2Id
                SecurityGroups:
                  - !Ref ECSTaskSecurityGroup

  # EventBridge Role for ECS Task Execution
  EventBridgeECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-eventbridge-ecs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref BatchTaskDefinition
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ECSTaskExecutionRole.Arn
                  - !GetAtt ECSTaskRoleBatch.Arn
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-eventbridge-ecs-role
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

# ===========================================================================
# Outputs
# ===========================================================================
Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${ProjectName}-${Environment}-ecs-cluster-name

  ALBDNSName:
    Description: ALB DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${ProjectName}-${Environment}-alb-dns-name

  PublicWebServiceName:
    Description: Public Web Service Name
    Value: !GetAtt PublicWebService.Name
    Export:
      Name: !Sub ${ProjectName}-${Environment}-public-web-service-name

  AdminServiceName:
    Description: Admin Service Name
    Value: !GetAtt AdminService.Name
    Export:
      Name: !Sub ${ProjectName}-${Environment}-admin-service-name
