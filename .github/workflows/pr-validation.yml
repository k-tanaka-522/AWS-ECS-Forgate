# ==============================================================================
# Pull Request Validation - GitHub Actions
# ==============================================================================
# ÁõÆÁöÑ: PR„ÅÆËá™ÂãïÊ§úË®ºÔºàLint, Test, CloudFormation ValidationÔºâ
# „Éà„É™„Ç¨„Éº: Pull Request‰ΩúÊàê„ÉªÊõ¥Êñ∞ÊôÇ
# ==============================================================================

name: PR Validation

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  # ===========================================================================
  # Lint Application Code
  # ===========================================================================
  lint-application:
    name: Lint Application Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Run ESLint
        run: |
          cd app
          npm run lint || echo "‚ö†Ô∏è Lint warnings found"

  # ===========================================================================
  # Test Application Code
  # ===========================================================================
  test-application:
    name: Test Application Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Run tests
        run: |
          cd app
          npm test

  # ===========================================================================
  # Validate CloudFormation Templates
  # ===========================================================================
  validate-cloudformation:
    name: Validate CloudFormation Templates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Validate Platform Stack
        run: |
          echo "Validating Platform Account stack.yaml..."
          aws cloudformation validate-template \
            --template-body file://infra/platform/stack.yaml \
            --region ap-northeast-1

      - name: Validate Platform Nested Templates
        run: |
          echo "Validating Platform nested templates..."

          for template in infra/platform/nested/*.yaml; do
            echo "Validating ${template}..."
            aws cloudformation validate-template \
              --template-body file://${template} \
              --region ap-northeast-1
          done

      - name: Validate Service Account Templates
        run: |
          echo "Validating Service Account templates..."

          for template in infra/service/*.yaml; do
            echo "Validating ${template}..."
            aws cloudformation validate-template \
              --template-body file://${template} \
              --region ap-northeast-1
          done

  # ===========================================================================
  # Build Docker Images (without pushing)
  # ===========================================================================
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Public Web image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/public/Dockerfile
          push: false
          tags: myapp-public-web:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Admin Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/admin/Dockerfile
          push: false
          tags: myapp-admin-dashboard:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Batch Processing image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/batch/Dockerfile
          push: false
          tags: myapp-batch-processing:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================================================
  # Summary
  # ===========================================================================
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [lint-application, test-application, validate-cloudformation, build-docker-images]
    if: always()

    steps:
      - name: Check validation results
        run: |
          echo "üìä Validation Summary"
          echo "===================="
          echo "Lint: ${{ needs.lint-application.result }}"
          echo "Test: ${{ needs.test-application.result }}"
          echo "CloudFormation: ${{ needs.validate-cloudformation.result }}"
          echo "Docker Build: ${{ needs.build-docker-images.result }}"

          if [[ "${{ needs.lint-application.result }}" == "success" ]] && \
             [[ "${{ needs.test-application.result }}" == "success" ]] && \
             [[ "${{ needs.validate-cloudformation.result }}" == "success" ]] && \
             [[ "${{ needs.build-docker-images.result }}" == "success" ]]; then
            echo "‚úÖ All validations passed!"
            exit 0
          else
            echo "‚ùå Some validations failed"
            exit 1
          fi
