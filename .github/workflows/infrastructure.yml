name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/cloudformation/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      account:
        description: 'Account to deploy'
        required: true
        type: choice
        options:
          - platform
          - service

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy CloudFormation Stacks
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy Platform Account (if selected)
        if: github.event.inputs.account == 'platform' || github.event.inputs.account == ''
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "Deploying Platform Account infrastructure for environment: $ENV"

          # Upload nested templates to S3
          BUCKET_NAME="sample-app-$ENV-cfn-templates"
          aws s3 mb s3://$BUCKET_NAME 2>/dev/null || echo "Bucket already exists"

          aws s3 cp infra/cloudformation/platform/nested/ \
            s3://$BUCKET_NAME/platform/nested/ --recursive

          # Create Change Set
          aws cloudformation create-change-set \
            --stack-name sample-app-$ENV-platform \
            --template-body file://infra/cloudformation/platform/stacks/main/stack.yaml \
            --parameters file://infra/cloudformation/platform/parameters/$ENV.json \
            --capabilities CAPABILITY_IAM \
            --change-set-name deploy-$(date +%Y%m%d-%H%M%S) \
            --change-set-type $(aws cloudformation describe-stacks --stack-name sample-app-$ENV-platform 2>/dev/null && echo "UPDATE" || echo "CREATE")

          # Wait for Change Set creation
          aws cloudformation wait change-set-create-complete \
            --stack-name sample-app-$ENV-platform \
            --change-set-name deploy-$(date +%Y%m%d-%H%M%S)

          # Execute Change Set
          aws cloudformation execute-change-set \
            --stack-name sample-app-$ENV-platform \
            --change-set-name deploy-$(date +%Y%m%d-%H%M%S)

          # Wait for stack completion
          aws cloudformation wait stack-update-complete \
            --stack-name sample-app-$ENV-platform || \
          aws cloudformation wait stack-create-complete \
            --stack-name sample-app-$ENV-platform

      - name: Deploy Service Account Network Stack
        if: github.event.inputs.account == 'service' || github.event.inputs.account == ''
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "Deploying Service Account Network stack for environment: $ENV"

          aws cloudformation deploy \
            --stack-name sample-app-$ENV-service-network \
            --template-file infra/cloudformation/service/stacks/network/main.yaml \
            --parameter-overrides $(jq -r '.network[] | "\(.ParameterKey)=\(.ParameterValue)"' infra/cloudformation/service/parameters/$ENV.json) \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Deploy Service Account Database Stack
        if: github.event.inputs.account == 'service' || github.event.inputs.account == ''
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "Deploying Service Account Database stack for environment: $ENV"

          aws cloudformation deploy \
            --stack-name sample-app-$ENV-service-database \
            --template-file infra/cloudformation/service/stacks/database/main.yaml \
            --parameter-overrides $(jq -r '.database[] | "\(.ParameterKey)=\(.ParameterValue)"' infra/cloudformation/service/parameters/$ENV.json) \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Deploy Service Account Compute Stack
        if: github.event.inputs.account == 'service' || github.event.inputs.account == ''
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "Deploying Service Account Compute stack for environment: $ENV"

          aws cloudformation deploy \
            --stack-name sample-app-$ENV-service-compute \
            --template-file infra/cloudformation/service/stacks/compute/main.yaml \
            --parameter-overrides $(jq -r '.compute[] | "\(.ParameterKey)=\(.ParameterValue)"' infra/cloudformation/service/parameters/$ENV.json) \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Deploy Service Account Monitoring Stack
        if: github.event.inputs.account == 'service' || github.event.inputs.account == ''
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "Deploying Service Account Monitoring stack for environment: $ENV"

          aws cloudformation deploy \
            --stack-name sample-app-$ENV-service-monitoring \
            --template-file infra/cloudformation/service/stacks/monitoring/main.yaml \
            --parameter-overrides $(jq -r '.monitoring[] | "\(.ParameterKey)=\(.ParameterValue)"' infra/cloudformation/service/parameters/$ENV.json) \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Summary
        run: |
          echo "âœ… Infrastructure deployment completed!"
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "Account: ${{ github.event.inputs.account || 'all' }}"
